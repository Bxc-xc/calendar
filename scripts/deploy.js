#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ ÂºÄÂßãÈÉ®ÁΩ≤Ê°åÈù¢Êó•ÂéÜÂ∫îÁî®...');

try {
  // 1. Ê∏ÖÁêÜ‰πãÂâçÁöÑÊûÑÂª∫
  console.log('üßπ Ê∏ÖÁêÜ‰πãÂâçÁöÑÊûÑÂª∫...');
  if (fs.existsSync('dist')) {
    fs.rmSync('dist', { recursive: true, force: true });
  }

  // 2. ÂÆâË£Ö‰æùËµñ
  console.log('üì¶ ÂÆâË£Ö‰æùËµñ...');
  execSync('npm install', { stdio: 'inherit' });

  // 3. ÁîüÊàêÂõæÊ†á
  console.log('üé® ÁîüÊàêÂõæÊ†á...');
  execSync('npm run generate-icons', { stdio: 'inherit' });

  // 4. ÊûÑÂª∫ÂâçÁ´Ø
  console.log('üî® ÊûÑÂª∫ÂâçÁ´Ø...');
  execSync('npm run build', { stdio: 'inherit' });

  // 5. Â§çÂà∂ÂøÖË¶ÅÊñá‰ª∂
  console.log('üìã Â§çÂà∂ÂøÖË¶ÅÊñá‰ª∂...');
  const filesToCopy = ['main.js', 'preload.js', 'package.json'];
  
  filesToCopy.forEach(file => {
    if (fs.existsSync(file)) {
      fs.copyFileSync(file, path.join('dist', file));
      console.log(`‚úÖ Â∑≤Â§çÂà∂: ${file}`);
    }
  });

  // 6. Â§çÂà∂assetsÁõÆÂΩï
  if (fs.existsSync('assets')) {
    const distAssets = path.join('dist', 'assets');
    if (!fs.existsSync(distAssets)) {
      fs.mkdirSync(distAssets, { recursive: true });
    }
    
    const copyDir = (src, dest) => {
      const entries = fs.readdirSync(src, { withFileTypes: true });
      entries.forEach(entry => {
        const srcPath = path.join(src, entry.name);
        const destPath = path.join(dest, entry.name);
        
        if (entry.isDirectory()) {
          if (!fs.existsSync(destPath)) {
            fs.mkdirSync(destPath, { recursive: true });
          }
          copyDir(srcPath, destPath);
        } else {
          fs.copyFileSync(srcPath, destPath);
        }
      });
    };
    
    copyDir('assets', distAssets);
    console.log('‚úÖ Â∑≤Â§çÂà∂: assets/');
  }

  // 7. ÊâìÂåÖÂ∫îÁî®
  console.log('üì¶ ÊâìÂåÖÂ∫îÁî®...');
  execSync('npm run dist', { stdio: 'inherit' });

  console.log('üéâ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ');
  console.log('üìÅ ÂÆâË£ÖÂåÖ‰Ωç‰∫é: dist/');
  
  // ÊòæÁ§∫ÊûÑÂª∫‰ø°ÊÅØ
  if (fs.existsSync('dist')) {
    const distFiles = fs.readdirSync('dist');
    console.log('üìã ÁîüÊàêÁöÑÊñá‰ª∂:');
    distFiles.forEach(file => {
      const filePath = path.join('dist', file);
      const stats = fs.statSync(filePath);
      if (stats.isFile()) {
        const size = (stats.size / 1024 / 1024).toFixed(2);
        console.log(`  - ${file} (${size} MB)`);
      }
    });
  }

} catch (error) {
  console.error('‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:', error.message);
  process.exit(1);
}